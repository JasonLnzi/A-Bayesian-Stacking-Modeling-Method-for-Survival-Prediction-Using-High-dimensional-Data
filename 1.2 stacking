
rm(list=ls())
ls()

library(BhGLM)
library(glmnet)

library("rms")
library(survival)
library(riskRegression)
library("pec")

source("bmlasso.R")
source("prepare.R")
source("update.R")
source("bmlasso1.R")
source("update1.R")
source("bs.t.R")
source("glmNet1.R")


############################### grouping 2  simple overlap  ###############################

load("./Scenario1.Rdata")

############################### grouping 2  simple overlap

datalist = datalist1


c = 1
m = 20
n.sim = 100
data_list = LP_list = y.test_list = BZ_list = {}


iter = 1
start.time <- Sys.time()
###### run
for (iter in 1:n.sim) {
  
  x.train = datalist[[iter]][[1]]
  x.train = as.matrix(x.train)
  
  y.train = datalist[[iter]][[2]]
  
  
  x.test = datalist[[iter]][[3]]
  x.test = as.matrix(x.test)
  
  y.test = datalist[[iter]][[4]]
  y.test1 = as.matrix(y.test)
  y.test_list[[c]] = y.test1
  
  
  ############################# 1.stacking #############################
  ### 0 layer: five-fold CV
  LP0 = BZ0 = NULL
  
  # fit J models
  LP = BZ = NULL
  j = 1
  for (j in 1:length(usedgroup)) {
    
    xxx0 = x.train[, usedgroup[[j]]]
    xxx1 = x.test[, usedgroup[[j]]]
    
    fL = glmnet(xxx0, y.train, family = "cox")
    cv.fL <- cv.glmnet(xxx0, y.train, family = "cox")
    
    lp1 = predict(fL, xxx1, s = cv.fL$lambda.min, type = "link")
    colnames(lp1) = paste("M", j, sep = "")
    LP = cbind(LP, lp1)
    
    datFitted = data.frame(xxx0, as.matrix(y.train))
    datFitted$lp0 = predict(fL, xxx0, s = cv.fL$lambda.min, type = "link")
    
    model.train <- cph(Surv(time, status) ~ lp0, 
                       data = datFitted, 
                       init = 1, iter.max = 0,
                       x = TRUE, y = TRUE, surv = TRUE)
    
    Hazard <- basehaz(model.train, centered = F)
    Hazard1 <- Hazard[!duplicated(Hazard$hazard), ]
    base_H = as.matrix(Hazard1[, 1]) 
    colnames(base_H) = paste("M", j, sep = "")
    BZ = cbind(BZ, base_H)
    
  }
  
  time_P = as.matrix(Hazard1[, 2]) 
  colnames(time_P) = "time"
  BZ = cbind(time_P, BZ)
  BZ0 = rbind(BZ0, BZ)
  
  LP_0 = LP
  LP_list[[c]] = LP
  
  BZ0 = as.data.frame(BZ0)
  BZ1 <- BZ0[!duplicated(BZ0$time), ]
  BZ1 = BZ1[order(BZ1$time), ]
  BZ_list[[c]] = BZ1
  
  
  # return weight, Zind, and Evaluate survival for cv.grps at time t
  tt = quantile(y.test1[, 1], probs = seq(0, 1, 1/8)) #nine evenly spaced quantiles of the observed event
  
  cross.dat = as.matrix(y.test)
  cross.fwrd.dat = as.data.frame(cross.dat)
  St1 = brier.stacked = NULL
  
  for (a in 1:length(tt)) {
    
    # Compute weight, Zind at time point t
    brier.single = bs.dat.t(cross.fwrd.dat, tt[a])
    brier = brier.single$rslt
    brier.stacked = rbind(brier.stacked, brier)
    
    # Compute censoring survival at time point t
    St0 = NULL
    b = 1
    for (b in 1:ncol(LP_0)) {
      
      index = which(abs(BZ1$time - tt[a]) == min(abs(BZ1$time - tt[a])))
      S0 <- exp(-BZ1[index, b+1])
      
      St = S0^(exp(LP_0[, b]))
      St = St[brier.single$booRemove]
      St = as.matrix(St)
      colnames(St) = paste("M", b, sep = "")
      St0 = cbind(St0, St)
      
    }
    
    St1 = rbind(St1, St0)
  
  }
  
  opt.dat = cbind(brier.stacked, St1)						# Bind all the optimization quantities together
  opt.dat = as.matrix(opt.dat)
  data_list[[c]] = opt.dat
  
  
  #end
  pre <- rep("\b", c)
  cat(pre, c,  "/", 100, sep = "")
  flush.console()
  c = c + 1
  
}

stop.time <- Sys.time()
minutes <- round(difftime(stop.time, start.time, units = "min"), 3)
cat("simulation time:", minutes, "minutes \n")   

#simulation time: 40.975 minutes


save(data_list, LP_list, y.test_list, BZ_list, file = "data_test1.Rdata")
